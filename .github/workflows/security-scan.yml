name: Security Scan

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    # Run weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:

jobs:
  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        service:
          - gateway
          - citizen
          - ingestion
          - metadata
          - transfer
          - mintic_client
          - signature
          - sharing
          - notification
          - read_models
          - auth
          - transfer_worker
          - frontend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            docker build -t ${{ matrix.service }}:test -f apps/frontend/Dockerfile apps/frontend
          else
            docker build -t ${{ matrix.service }}:test -f services/${{ matrix.service }}/Dockerfile services/${{ matrix.service }}
          fi
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
      
      - name: Run Trivy (human-readable)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:test
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
  
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      
      - name: Install Python audit tools
        run: |
          pip install safety pip-audit
      
      - name: Audit frontend dependencies (npm)
        working-directory: apps/frontend
        run: |
          npm audit --audit-level=moderate || true
          npm audit --json > ../../security-reports/npm-audit.json || true
      
      - name: Audit Python dependencies (safety)
        run: |
          # Check all service requirements
          for service in services/*/; do
            if [ -f "$service/pyproject.toml" ]; then
              echo "Checking $service"
              cd $service
              poetry export -f requirements.txt --output requirements.txt --without-hashes || true
              safety check --file requirements.txt --json > ../../security-reports/safety-$(basename $service).json || true
              cd ../..
            fi
          done
      
      - name: Audit Python dependencies (pip-audit)
        run: |
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Auditing $service"
              pip-audit -r "$service/requirements.txt" --format json > security-reports/pip-audit-$(basename $service).json || true
            fi
          done
      
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-audit-results
          path: security-reports/
          retention-days: 30
  
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scan
      
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
  
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"
  
  docker-bench:
    name: Docker Security Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Docker Bench Security
        run: |
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo sh docker-bench-security.sh -l docker-bench-results.log || true
      
      - name: Upload Docker Bench results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: docker-bench-results
          path: docker-bench-security/docker-bench-results.log
          retention-days: 30
  
  sast-semgrep:
    name: SAST with Semgrep
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/python
            p/javascript
      
      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif
  
  generate-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [trivy-scan, dependency-audit, secrets-scan, codeql-analysis]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate security report
        run: |
          python scripts/generate-security-report.py \
            --output security-report.md \
            --artifacts .
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 90
      
      - name: Comment on PR (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${report}`
            });

