name: CI/CD Pipeline - Azure (Federated Auth)

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

# Permisos necesarios para federated credentials y security scanning
permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

env:
  AZURE_REGION: northcentralus
  AKS_CLUSTER_NAME: carpeta-ciudadana-dev
  RESOURCE_GROUP: carpeta-ciudadana-dev-rg

jobs:
  # Lint and Test Frontend
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci
      
      - name: Lint
        working-directory: apps/frontend
        run: npm run lint
      
      - name: Type check
        working-directory: apps/frontend
        run: npx tsc --noEmit
      
      - name: Run tests
        working-directory: apps/frontend
        run: npm run test:unit || true

  # Lint and Test Backend Services
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - gateway
          - citizen
          - ingestion
          - transfer
          - mintic_client
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Verify Poetry installation
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
      
      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-root
      
      - name: Lint
        working-directory: services/${{ matrix.service }}
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run ruff check . || true
      
      - name: Run tests
        working-directory: services/${{ matrix.service }}
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run pytest tests/ || true

  # Build and Push Docker Images to Docker Hub (Gratis)
  build-and-push:
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    strategy:
      matrix:
        service:
          - frontend
          - gateway
          - citizen
          - ingestion
          - transfer
          - mintic_client
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'frontend' && 'apps/frontend' || format('services/{0}', matrix.service) }}
          file: ${{ matrix.service == 'frontend' && 'apps/frontend/Dockerfile' || format('services/{0}/Dockerfile', matrix.service) }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/carpeta-${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/carpeta-${{ matrix.service }}:${{ github.sha }}

  # Deploy to AKS usando Federated Credentials
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      # Azure Login con Federated Credentials (sin Service Principal!)
      - name: Azure Login (Federated)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install carpeta-ciudadana \
            deploy/helm/carpeta-ciudadana \
            --namespace carpeta-ciudadana \
            --create-namespace \
            --set global.imageRegistry=${{ secrets.DOCKERHUB_USERNAME }} \
            --set frontend.image.tag=${{ github.sha }} \
            --set gateway.image.tag=${{ github.sha }} \
            --set citizen.image.tag=${{ github.sha }} \
            --set ingestion.image.tag=${{ github.sha }} \
            --set transfer.image.tag=${{ github.sha }} \
            --set minticClient.image.tag=${{ github.sha }} \
            --wait \
            --timeout 10m

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

