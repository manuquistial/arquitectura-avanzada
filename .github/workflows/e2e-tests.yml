name: E2E Tests (Standalone)

on:
  pull_request:
    branches: [master, develop]
  workflow_dispatch:
  # Note: For push to master/develop, E2E tests run in ci.yml after build-and-push

jobs:
  e2e-tests:
    name: E2E Tests (PR - Local Build)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Only runs on PRs and manual triggers
    # For master/develop pushes, E2E runs in ci.yml with registry images
    
    strategy:
      fail-fast: false
      matrix:
        # Only chromium for PRs to save CI minutes
        browser: [chromium]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true  # Don't fail if login fails
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: tests/e2e/package-lock.json
      
      - name: Install dependencies
        working-directory: tests/e2e
        run: npm ci
      
      - name: Install Playwright Browsers
        working-directory: tests/e2e
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Build Docker images locally
        run: |
          echo "ðŸ”¨ Building images locally for PR testing..."
          echo "   This ensures tests run against current code changes"
          docker compose --profile app build
          echo "âœ… Local build completed"
        env:
          # Use local tag to avoid confusion with registry images
          TAG: pr-${{ github.event.pull_request.number || 'local' }}
      
      - name: Start services (Docker Compose)
        run: |
          docker compose --profile app up -d
          sleep 30  # Wait for services to be ready
        env:
          TAG: pr-${{ github.event.pull_request.number || 'local' }}
      
      - name: Wait for frontend
        run: |
          npx wait-on http://localhost:3000 --timeout 120000
      
      - name: Run Playwright tests
        working-directory: tests/e2e
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:8000
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: tests/e2e/test-results/
          retention-days: 7
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: tests/e2e/playwright-report/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: docker compose down

  e2e-smoke:
    name: E2E Smoke Tests (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install dependencies
        working-directory: tests/e2e
        run: npm ci
      
      - name: Install Playwright
        working-directory: tests/e2e
        run: npx playwright install --with-deps chromium
      
      - name: Start services
        run: |
          # Start only infrastructure (postgres, redis, opensearch)
          # No need for full app in smoke tests - just test frontend
          docker compose up -d postgres redis opensearch
          
          echo "Waiting for infrastructure to be ready..."
          sleep 10
          
          echo "âœ… Infrastructure ready"
      
      - name: Install frontend dependencies
        working-directory: apps/frontend
        run: npm ci
      
      - name: Build and start frontend
        working-directory: apps/frontend
        run: |
          # Build frontend locally for testing
          npm run build
          
          # Start frontend in background
          npm start &
          
          # Wait for frontend to be ready
          echo "Waiting for frontend to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do 
            echo "Waiting for frontend..."
            sleep 2
          done' || {
            echo "Frontend not ready after 2 minutes"
            exit 1
          }
          
          echo "âœ… Frontend is ready"
      
      - name: Run smoke tests
        working-directory: tests/e2e
        run: npx playwright test auth-flow.spec.ts --project=chromium
      
      - name: Stop services
        if: always()
        run: docker compose down


