name: E2E Tests

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: []  # Will be populated if running after build-and-push
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true  # Don't fail if login fails
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: tests/e2e/package-lock.json
      
      - name: Install dependencies
        working-directory: tests/e2e
        run: npm ci
      
      - name: Install Playwright Browsers
        working-directory: tests/e2e
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Pull or Build Docker images
        run: |
          # Set environment variables for Docker Compose
          export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME || 'manuelquistial' }}
          export TAG=latest
          
          echo "üîç Attempting to pull images from Docker Hub..."
          echo "   Registry: $DOCKER_USERNAME/carpeta-*:$TAG"
          
          # Try to pull images from registry
          if docker compose --profile app pull 2>/dev/null; then
            echo "‚úÖ Successfully pulled images from Docker Hub"
          else
            echo "‚ö†Ô∏è  Pull failed or images not available"
            echo "üî® Building images locally as fallback..."
            docker compose --profile app build
            echo "‚úÖ Local build completed"
          fi
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME || 'manuelquistial' }}
          TAG: latest
      
      - name: Start services (Docker Compose)
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME || 'manuelquistial' }}
          export TAG=latest
          docker compose --profile app up -d
          sleep 30  # Wait for services to be ready
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME || 'manuelquistial' }}
          TAG: latest
      
      - name: Wait for frontend
        run: |
          npx wait-on http://localhost:3000 --timeout 120000
      
      - name: Run Playwright tests
        working-directory: tests/e2e
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:8000
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: tests/e2e/test-results/
          retention-days: 7
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: tests/e2e/playwright-report/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: docker compose down

  e2e-smoke:
    name: E2E Smoke Tests (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install dependencies
        working-directory: tests/e2e
        run: npm ci
      
      - name: Install Playwright
        working-directory: tests/e2e
        run: npx playwright install --with-deps chromium
      
      - name: Start services
        run: |
          # Start only infrastructure (postgres, redis, opensearch)
          # No need for full app in smoke tests - just test frontend
          docker compose up -d postgres redis opensearch
          
          echo "Waiting for infrastructure to be ready..."
          sleep 10
          
          echo "‚úÖ Infrastructure ready"
      
      - name: Install frontend dependencies
        working-directory: apps/frontend
        run: npm ci
      
      - name: Build and start frontend
        working-directory: apps/frontend
        run: |
          # Build frontend locally for testing
          npm run build
          
          # Start frontend in background
          npm start &
          
          # Wait for frontend to be ready
          echo "Waiting for frontend to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do 
            echo "Waiting for frontend..."
            sleep 2
          done' || {
            echo "Frontend not ready after 2 minutes"
            exit 1
          }
          
          echo "‚úÖ Frontend is ready"
      
      - name: Run smoke tests
        working-directory: tests/e2e
        run: npx playwright test auth-flow.spec.ts --project=chromium
      
      - name: Stop services
        if: always()
        run: docker compose down


  # E2E tests that run after images are pushed (for master/develop only)
  e2e-tests-post-build:
    name: E2E Tests (After Build)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: []  # In ci.yml this would be: needs: [build-and-push]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]  # Only chromium for speed
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: tests/e2e/package-lock.json
      
      - name: Install dependencies
        working-directory: tests/e2e
        run: npm ci
      
      - name: Install Playwright Browsers
        working-directory: tests/e2e
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Pull images from registry
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export TAG=latest
          echo "üîç Pulling images from Docker Hub..."
          docker compose --profile app pull
          echo "‚úÖ All images pulled successfully"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TAG: latest
      
      - name: Start services
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export TAG=latest
          docker compose --profile app up -d
          sleep 30
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TAG: latest
      
      - name: Wait for frontend
        run: npx wait-on http://localhost:3000 --timeout 120000
      
      - name: Run Playwright tests
        working-directory: tests/e2e
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:8000
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-post-build-${{ matrix.browser }}
          path: tests/e2e/test-results/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: docker compose down
