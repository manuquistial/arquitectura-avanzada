apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotator
  namespace: carpeta-ciudadana
  labels:
    app.kubernetes.io/name: secret-rotator
    app.kubernetes.io/part-of: carpeta-ciudadana
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-rotator
  namespace: carpeta-ciudadana
rules:
  # Read and update secrets
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "patch", "create"]
  # Restart deployments
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "patch"]
  # Check rollout status
  - apiGroups: ["apps"]
    resources: ["deployments/status"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-rotator
  namespace: carpeta-ciudadana
subjects:
  - kind: ServiceAccount
    name: secret-rotator
    namespace: carpeta-ciudadana
roleRef:
  kind: Role
  name: secret-rotator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-rotation-script
  namespace: carpeta-ciudadana
  labels:
    app.kubernetes.io/name: secret-rotator
    app.kubernetes.io/part-of: carpeta-ciudadana
data:
  rotate.sh: |
    #!/bin/bash
    set -e
    
    echo "=== Starting secret rotation ==="
    echo "Timestamp: $(date)"
    echo "Namespace: ${NAMESPACE}"
    echo ""
    
    # Function to generate secrets
    generate_secret() {
        openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
    }
    
    generate_jwt_secret() {
        openssl rand -hex 32
    }
    
    # Function to update secret
    update_secret() {
        local secret_name=$1
        local key=$2
        local value=$3
        
        echo "Updating secret: $secret_name/$key"
        
        # Encode value to base64
        local encoded_value=$(echo -n "$value" | base64 -w 0)
        
        # Patch secret
        kubectl patch secret "$secret_name" -n "$NAMESPACE" \
            -p "{\"data\":{\"$key\":\"$encoded_value\"}}" \
            || kubectl create secret generic "$secret_name" -n "$NAMESPACE" \
                --from-literal="$key=$value"
    }
    
    # Generate new secrets
    echo "Generating new secrets..."
    NEW_JWT_SECRET=$(generate_jwt_secret)
    NEW_OPERATOR_API_KEY=$(generate_secret)
    
    echo "✅ Secrets generated"
    echo ""
    
    # Update secrets
    echo "Updating secrets in Kubernetes..."
    update_secret "jwt-secret" "JWT_SECRET_KEY" "$NEW_JWT_SECRET"
    update_secret "api-keys" "OPERATOR_API_KEY" "$NEW_OPERATOR_API_KEY"
    
    echo "✅ Secrets updated"
    echo ""
    
    # Rollout restart affected deployments
    echo "Rolling out deployments..."
    
    DEPLOYMENTS=(
        "carpeta-ciudadana-gateway"
        "carpeta-ciudadana-auth"
        "carpeta-ciudadana-signature"
        "carpeta-ciudadana-mintic-client"
        "carpeta-ciudadana-transfer"
    )
    
    for deployment in "${DEPLOYMENTS[@]}"; do
        if kubectl get deployment "$deployment" -n "$NAMESPACE" &> /dev/null; then
            echo "Rolling out: $deployment"
            kubectl rollout restart deployment/"$deployment" -n "$NAMESPACE"
        else
            echo "⚠️  Deployment not found: $deployment"
        fi
    done
    
    echo "✅ Rollouts initiated"
    echo ""
    
    echo "=== Secret rotation completed ==="
    echo "Rotated at: $(date)"
    
    # Send notification (optional, requires additional setup)
    # curl -X POST $WEBHOOK_URL -d "Secret rotation completed at $(date)"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: rotate-secrets
  namespace: carpeta-ciudadana
  labels:
    app.kubernetes.io/name: secret-rotator
    app.kubernetes.io/part-of: carpeta-ciudadana
spec:
  # Run every 30 days at 3:00 AM
  schedule: "0 3 1 * *"  # At 03:00 on day-of-month 1
  
  # Keep last 3 successful and 1 failed job
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: secret-rotator
        app.kubernetes.io/part-of: carpeta-ciudadana
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: secret-rotator
        spec:
          serviceAccountName: secret-rotator
          restartPolicy: OnFailure
          
          containers:
          - name: rotate-secrets
            image: bitnami/kubectl:latest
            imagePullPolicy: IfNotPresent
            
            env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            command:
            - /bin/bash
            - /scripts/rotate.sh
            
            volumeMounts:
            - name: scripts
              mountPath: /scripts
              readOnly: true
            
            resources:
              requests:
                memory: "64Mi"
                cpu: "100m"
              limits:
                memory: "128Mi"
                cpu: "200m"
          
          volumes:
          - name: scripts
            configMap:
              name: secret-rotation-script
              defaultMode: 0755

