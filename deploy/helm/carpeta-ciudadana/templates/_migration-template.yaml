{{/*
Generic migration job template for microservices
Usage: {{ include "carpeta-ciudadana.migration" (dict "service" "ingestion" "context" $) }}
*/}}
{{- define "carpeta-ciudadana.migration" -}}
{{- $service := .service -}}
{{- $context := .context -}}
{{- $serviceValues := index $context.Values $service -}}
{{- if and $serviceValues.enabled $context.Values.migrations.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "carpeta-ciudadana.fullname" $context }}-migrate-{{ $service }}-{{ $context.Release.Revision }}
  labels:
    app: migrate-{{ $service }}
    {{- include "carpeta-ciudadana.labels" $context | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 3
  template:
    metadata:
      name: migrate-{{ $service }}
      labels:
        app: migrate-{{ $service }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ include "carpeta-ciudadana.serviceAccountName" $context }}
      containers:
      - name: migrate
        image: "{{ $context.Values.global.imageRegistry }}/{{ $serviceValues.image.repository }}:{{ $serviceValues.image.tag }}"
        imagePullPolicy: {{ $context.Values.global.imagePullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "üîÑ Running {{ $service }} database migrations..."
          
          # Check if alembic is available
          if command -v alembic >/dev/null 2>&1; then
            echo "Using Alembic for migrations"
            cd /app
            alembic upgrade head
          elif [ -f "/app/migrations/init.sql" ]; then
            echo "Using SQL scripts for migrations"
            psql $POSTGRES_URI -f /app/migrations/init.sql
          else
            echo "‚ö†Ô∏è  No migration tool found, skipping..."
          fi
          
          echo "‚úÖ {{ $service }} migrations completed successfully"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: DATABASE_URL
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: POSTGRES_URI
        envFrom:
        - configMapRef:
            name: {{ include "carpeta-ciudadana.fullname" $context }}-app-config
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
{{- end }}
{{- end }}
