openapi: 3.0.0
info:
  title: Carpeta Ciudadana Gateway API
  description: API Gateway for Carpeta Ciudadana operator
  version: 1.0.0
  contact:
    name: Carpeta Ciudadana Team
    email: support@carpeta-ciudadana.com

servers:
  - url: https://{apim-name}.azure-api.net/api
    description: API Management Gateway

paths:
  /citizens:
    post:
      summary: Register a new citizen
      description: Register a new citizen in the system
      operationId: register-citizen
      tags:
        - Citizens
      x-azure-backend:
        serviceUrl: "{{citizen-backend}}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CitizenCreate'
      responses:
        '201':
          description: Citizen registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Citizen'
        '400':
          description: Bad request
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

    get:
      summary: List citizens
      description: Get list of citizens
      operationId: list-citizens
      tags:
        - Citizens
      x-azure-backend:
        serviceUrl: "{{citizen-backend}}"
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of citizens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Citizen'

  /citizens/{citizen_id}:
    get:
      summary: Get citizen by ID
      description: Get citizen information by ID
      operationId: get-citizen
      tags:
        - Citizens
      x-azure-backend:
        serviceUrl: "{{citizen-backend}}"
      parameters:
        - name: citizen_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Citizen information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Citizen'
        '404':
          description: Citizen not found

  /documents:
    post:
      summary: Upload document
      description: Get pre-signed URL for document upload
      operationId: upload-document
      tags:
        - Documents
      x-azure-backend:
        serviceUrl: "{{metadata-backend}}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
      responses:
        '200':
          description: Pre-signed URL generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /documents/{document_id}:
    get:
      summary: Download document
      description: Get pre-signed URL for document download
      operationId: download-document
      tags:
        - Documents
      x-azure-backend:
        serviceUrl: "{{metadata-backend}}"
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pre-signed URL generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDownloadResponse'
        '404':
          description: Document not found

  /transfer:
    post:
      summary: Transfer citizen
      description: Transfer citizen to another operator
      operationId: transfer-citizen
      tags:
        - Transfer
      x-azure-backend:
        serviceUrl: "{{transfer-backend}}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '202':
          description: Transfer initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /mintic/register-citizen:
    post:
      summary: Register citizen in MinTIC Hub
      description: Register citizen in the MinTIC Hub
      operationId: mintic-register-citizen
      tags:
        - MinTIC Hub
      x-azure-backend:
        serviceUrl: "{{mintic-client-backend}}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinTICRegisterCitizenRequest'
      responses:
        '200':
          description: Citizen registered in MinTIC Hub
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinTICResponse'
        '400':
          description: Bad request
        '500':
          description: Internal server error

components:
  schemas:
    CitizenCreate:
      type: object
      required:
        - email
        - full_name
        - document_number
        - document_type
      properties:
        email:
          type: string
          format: email
        full_name:
          type: string
        document_number:
          type: string
        document_type:
          type: string
          enum: [CC, CE, PA, TI]

    Citizen:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        full_name:
          type: string
        document_number:
          type: string
        document_type:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    DocumentUploadRequest:
      type: object
      required:
        - citizen_id
        - file_name
        - content_type
      properties:
        citizen_id:
          type: integer
        file_name:
          type: string
        content_type:
          type: string
        metadata:
          type: object

    DocumentUploadResponse:
      type: object
      properties:
        upload_url:
          type: string
        document_id:
          type: string
        expires_at:
          type: string
          format: date-time

    DocumentDownloadResponse:
      type: object
      properties:
        download_url:
          type: string
        expires_at:
          type: string
          format: date-time

    TransferRequest:
      type: object
      required:
        - citizen_id
        - target_operator_id
      properties:
        citizen_id:
          type: integer
        target_operator_id:
          type: string
        reason:
          type: string

    TransferResponse:
      type: object
      properties:
        transfer_id:
          type: string
        status:
          type: string
        message:
          type: string

    MinTICRegisterCitizenRequest:
      type: object
      required:
        - idCitizen
        - operatorId
      properties:
        idCitizen:
          type: integer
        operatorId:
          type: string
        citizenName:
          type: string
        citizenEmail:
          type: string

    MinTICResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        status_code:
          type: integer

