<!-- Operation-specific policies for Carpeta Ciudadana API -->

<!-- Citizen Registration Policy -->
<policies>
    <inbound>
        <!-- Validate request body -->
        <validate-content unspecified-content-type-action="prevent" max-size="1048576" size-exceeded-action="prevent" errors-variable-name="requestBodyValidation">
            <content type="application/json" validate-as="json" action="prevent" />
        </validate-content>
        
        <!-- Log request details -->
        <log-to-eventhub logger-id="carpeta-ciudadana-logs">
            <message>Citizen Registration Request: @(context.Request.OriginalUrl) from @(context.Request.IpAddress)</message>
        </log-to-eventhub>
        
        <!-- Rate limiting for citizen operations -->
        <rate-limit-by-key calls="10" renewal-period="60" counter-key="@(context.Request.IpAddress + "-citizen")" />
        
        <!-- Forward to citizen service -->
        <set-backend-service base-url="http://citizen:8000" />
    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound>
        <!-- Add response headers -->
        <set-header name="X-Operation-Type" exists-action="override">
            <value>citizen-registration</value>
        </set-header>
        
        <!-- Log response -->
        <log-to-eventhub logger-id="carpeta-ciudadana-logs">
            <message>Citizen Registration Response: @(context.Response.StatusCode)</message>
        </log-to-eventhub>
    </outbound>
    <on-error>
        <log-to-eventhub logger-id="carpeta-ciudadana-logs">
            <message>Citizen Registration Error: @(context.LastError.Message)</message>
        </log-to-eventhub>
        
        <return-response>
            <set-status code="500" reason="Internal Server Error" />
            <set-body>{"error": "Citizen registration failed", "message": "Please try again later"}</set-body>
        </return-response>
    </on-error>
</policies>

<!-- Document Upload Policy -->
<policies>
    <inbound>
        <!-- Validate file size and type -->
        <validate-content unspecified-content-type-action="prevent" max-size="104857600" size-exceeded-action="prevent">
            <content type="application/pdf" action="prevent" />
            <content type="image/jpeg" action="prevent" />
            <content type="image/png" action="prevent" />
        </validate-content>
        
        <!-- Rate limiting for document operations -->
        <rate-limit-by-key calls="5" renewal-period="300" counter-key="@(context.Request.IpAddress + "-document")" />
        
        <!-- Forward to ingestion service -->
        <set-backend-service base-url="http://ingestion:8000" />
    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound>
        <set-header name="X-Operation-Type" exists-action="override">
            <value>document-upload</value>
        </set-header>
    </outbound>
    <on-error>
        <return-response>
            <set-status code="413" reason="File Too Large" />
            <set-body>{"error": "File too large", "message": "Maximum file size is 100MB"}</set-body>
        </return-response>
    </on-error>
</policies>

<!-- MinTIC Hub Integration Policy -->
<policies>
    <inbound>
        <!-- Additional validation for MinTIC operations -->
        <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="MinTIC operations require valid authentication." require-expiration-time="true" require-scheme="Bearer" require-signed-tokens="true">
            <openid-config url="https://login.microsoftonline.com/{mintic-tenant-id}/v2.0/.well-known/openid_configuration" />
            <audiences>
                <audience>api://mintic-hub</audience>
            </audiences>
        </validate-jwt>
        
        <!-- Rate limiting for MinTIC operations -->
        <rate-limit-by-key calls="20" renewal-period="3600" counter-key="@(context.Subscription.Id + "-mintic")" />
        
        <!-- Log MinTIC operations -->
        <log-to-eventhub logger-id="mintic-hub-logs">
            <message>MinTIC Hub Request: @(context.Request.OriginalUrl)</message>
        </log-to-eventhub>
        
        <!-- Forward to MinTIC client service -->
        <set-backend-service base-url="http://mintic-client:8000" />
    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound>
        <set-header name="X-Operation-Type" exists-action="override">
            <value>mintic-hub-integration</value>
        </set-header>
        
        <!-- Log MinTIC responses -->
        <log-to-eventhub logger-id="mintic-hub-logs">
            <message>MinTIC Hub Response: @(context.Response.StatusCode)</message>
        </log-to-eventhub>
    </outbound>
    <on-error>
        <log-to-eventhub logger-id="mintic-hub-logs">
            <message>MinTIC Hub Error: @(context.LastError.Message)</message>
        </log-to-eventhub>
        
        <return-response>
            <set-status code="502" reason="MinTIC Hub Unavailable" />
            <set-body>{"error": "MinTIC Hub service unavailable", "message": "Please try again later"}</set-body>
        </return-response>
    </on-error>
</policies>


