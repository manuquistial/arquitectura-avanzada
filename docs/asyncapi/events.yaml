asyncapi: 2.6.0
info:
  title: Carpeta Ciudadana - Event-Driven Architecture
  version: 0.1.0
  description: |
    Event-driven architecture for Carpeta Ciudadana microservices using SQS/SNS
    (with future Kafka/MSK compatibility)

servers:
  production:
    url: sqs.us-east-1.amazonaws.com
    protocol: sqs
    description: AWS SQS/SNS in production

channels:
  citizen/events:
    description: Citizen lifecycle events
    subscribe:
      message:
        oneOf:
          - $ref: '#/components/messages/CitizenRegistered'
          - $ref: '#/components/messages/CitizenUnregistered'

  document/events:
    description: Document lifecycle events
    subscribe:
      message:
        oneOf:
          - $ref: '#/components/messages/DocumentUploaded'
          - $ref: '#/components/messages/DocumentSigned'
          - $ref: '#/components/messages/DocumentAuthenticated'
          - $ref: '#/components/messages/DocumentShared'

  transfer/events:
    description: Transfer events
    subscribe:
      message:
        oneOf:
          - $ref: '#/components/messages/TransferInitiated'
          - $ref: '#/components/messages/TransferConfirmed'
          - $ref: '#/components/messages/TransferFailed'

components:
  messages:
    CitizenRegistered:
      name: CitizenRegistered
      title: Citizen Registered Event
      summary: Published when a new citizen registers
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CitizenEvent'

    CitizenUnregistered:
      name: CitizenUnregistered
      title: Citizen Unregistered Event
      summary: Published when a citizen unregisters
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CitizenEvent'

    DocumentUploaded:
      name: DocumentUploaded
      title: Document Uploaded Event
      summary: Published when a document is uploaded
      contentType: application/json
      payload:
        $ref: '#/components/schemas/DocumentEvent'

    DocumentSigned:
      name: DocumentSigned
      title: Document Signed Event
      summary: Published when a document is digitally signed
      contentType: application/json
      payload:
        $ref: '#/components/schemas/DocumentEvent'

    DocumentAuthenticated:
      name: DocumentAuthenticated
      title: Document Authenticated Event
      summary: Published when a document is authenticated by MinTIC
      contentType: application/json
      payload:
        $ref: '#/components/schemas/DocumentEvent'

    DocumentShared:
      name: DocumentShared
      title: Document Shared Event
      summary: Published when a document is shared
      contentType: application/json
      payload:
        $ref: '#/components/schemas/DocumentEvent'

    TransferInitiated:
      name: TransferInitiated
      title: Transfer Initiated Event
      summary: Published when a citizen transfer is initiated
      contentType: application/json
      payload:
        $ref: '#/components/schemas/TransferEvent'

    TransferConfirmed:
      name: TransferConfirmed
      title: Transfer Confirmed Event
      summary: Published when a transfer is confirmed
      contentType: application/json
      payload:
        $ref: '#/components/schemas/TransferEvent'

    TransferFailed:
      name: TransferFailed
      title: Transfer Failed Event
      summary: Published when a transfer fails
      contentType: application/json
      payload:
        $ref: '#/components/schemas/TransferEvent'

  schemas:
    BaseEvent:
      type: object
      required:
        - event_id
        - event_type
        - timestamp
        - aggregate_id
        - aggregate_type
        - version
      properties:
        event_id:
          type: string
          format: uuid
        event_type:
          type: string
        timestamp:
          type: string
          format: date-time
        aggregate_id:
          type: string
        aggregate_type:
          type: string
        version:
          type: integer
        metadata:
          type: object
        signature:
          type: string
          description: JWS signature for audit trail

    CitizenEvent:
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          properties:
            payload:
              type: object
              properties:
                citizen_id:
                  type: integer
                name:
                  type: string
                email:
                  type: string
                operator_id:
                  type: string
                operator_name:
                  type: string

    DocumentEvent:
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          properties:
            payload:
              type: object
              properties:
                document_id:
                  type: string
                  format: uuid
                citizen_id:
                  type: integer
                title:
                  type: string
                s3_key:
                  type: string
                s3_bucket:
                  type: string
                sha256:
                  type: string
                status:
                  type: string

    TransferEvent:
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          properties:
            payload:
              type: object
              properties:
                transfer_id:
                  type: string
                  format: uuid
                citizen_id:
                  type: integer
                source_operator_id:
                  type: string
                destination_operator_id:
                  type: string
                status:
                  type: string
                document_count:
                  type: integer

