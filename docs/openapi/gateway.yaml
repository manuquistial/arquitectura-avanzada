openapi: 3.0.3
info:
  title: Carpeta Ciudadana - Gateway API
  description: API Gateway for Carpeta Ciudadana microservices
  version: 0.1.0
  contact:
    name: Carpeta Ciudadana Team

servers:
  - url: https://api.carpeta-ciudadana.example.com
    description: Production
  - url: http://localhost:8000
    description: Local development

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from Cognito OIDC

  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
        status_code:
          type: integer

    Citizen:
      type: object
      required:
        - id
        - name
        - address
        - email
        - operatorId
        - operatorName
      properties:
        id:
          type: integer
          description: Citizen ID (c√©dula)
        name:
          type: string
        address:
          type: string
        email:
          type: string
          format: email
        operatorId:
          type: string
        operatorName:
          type: string

    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        citizen_id:
          type: integer
        title:
          type: string
        description:
          type: string
        filename:
          type: string
        content_type:
          type: string
        size:
          type: integer
        sha256:
          type: string
        status:
          type: string
          enum: [uploaded, processing, signed, authenticated, shared, transferred, error]
        created_at:
          type: string
          format: date-time

    UploadURLRequest:
      type: object
      required:
        - citizen_id
        - filename
        - content_type
        - title
      properties:
        citizen_id:
          type: integer
        filename:
          type: string
        content_type:
          type: string
        title:
          type: string
        description:
          type: string

    UploadURLResponse:
      type: object
      properties:
        upload_url:
          type: string
          description: Presigned PUT URL for S3 upload
        document_id:
          type: string
          format: uuid
        s3_key:
          type: string
        expires_in:
          type: integer

paths:
  /health:
    get:
      summary: Health check
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy

  /api/citizen/register:
    post:
      summary: Register citizen
      tags:
        - Citizen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Citizen'
      responses:
        '201':
          description: Citizen registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Citizen'
        '409':
          description: Citizen already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/citizen/{citizen_id}:
    get:
      summary: Get citizen by ID
      tags:
        - Citizen
      parameters:
        - name: citizen_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Citizen details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Citizen'
        '404':
          description: Citizen not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/ingestion/upload-url:
    post:
      summary: Get presigned URL for document upload
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadURLRequest'
      responses:
        '200':
          description: Presigned URL generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadURLResponse'

  /api/metadata/search:
    get:
      summary: Search documents
      tags:
        - Documents
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: citizen_id
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'

  /api/transfer/transferCitizen:
    post:
      summary: Receive citizen transfer from another operator
      tags:
        - Transfer
      security:
        - BearerAuth: []
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - citizenName
                - citizenEmail
                - urlDocuments
                - confirmAPI
              properties:
                id:
                  type: integer
                citizenName:
                  type: string
                citizenEmail:
                  type: string
                urlDocuments:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
                confirmAPI:
                  type: string
                  format: uri
      responses:
        '201':
          description: Transfer accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  citizen_id:
                    type: integer
        '409':
          description: Duplicate request (idempotency)

  /api/transfer/transferCitizenConfirm:
    post:
      summary: Confirm citizen transfer
      tags:
        - Transfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - req_status
              properties:
                id:
                  type: integer
                req_status:
                  type: integer
                  enum: [0, 1]
                  description: 1=success, 0=failure
      responses:
        '200':
          description: Confirmation received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

